import logging
from tea_sommelier_bot import TeaSommelierBot
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext
)
import asyncio

logger = logging.getLogger(__name__)
logging.getLogger("urllib3").setLevel(logging.WARNING)

class TelegramBot:
    def __init__(self, token: str, tea_bot: TeaSommelierBot):
        self.token = token
        self.tea_bot = tea_bot
        self.application = Application.builder().token(self.token).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)

    async def error_handler(self, update: object, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(msg="Exception while handling an update:", exc_info=context.error)

        if update and hasattr(update, 'effective_chat'):
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def start(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            "–Ø - –ß–∞–π–Ω—ã–π –°–æ–º–µ–ª—å–µ, –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π —á–∞–π.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —á–∞–π –≤—ã –∏—â–µ—Ç–µ: –µ–≥–æ —Ç–∏–ø, –≤–∫—É—Å–æ–≤—ã–µ –Ω–æ—Ç—ã, "
            "–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—É—é —Ü–µ–Ω—É –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
            "–£–ª—É–Ω —Å –≤–∞–Ω–∏–ª—å—é –¥–æ 1500‚ÇΩ\n"
            "–ö—Ä–∞—Å–Ω—ã–π —á–∞–π –∏–∑ –Æ–Ω—å–Ω–∞–Ω–∏\n"
            "–ó–µ–ª–µ–Ω—ã–π —á–∞–π —Ü–≤–µ—Ç–æ—á–Ω—ã–π\n"
            "–í—ã–¥–µ—Ä–∂–∞–Ω–Ω—ã–π –ø—É—ç—Ä\n"
        )

        await update.message.reply_text(welcome_text)

    async def send_long_message(self, context: CallbackContext, chat_id: int, text: str, **kwargs):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—è–º–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤"""
        max_length = 4000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        for i in range(0, len(text), max_length):
            part = text[i:i + max_length]
            try:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=part,
                    **kwargs
                )
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                await asyncio.sleep(0.5)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def help(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "ü´ñ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —á–∞–π –≤—ã –∏—â–µ—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "- –£–ª—É–Ω —Å –Ω–æ—Ç–∫–∞–º–∏ –≤–∞–Ω–∏–ª–∏ –¥–æ 1500 —Ä—É–±–ª–µ–π\n"
            "- –ö—Ä–µ–ø–∫–∏–π –∫—Ä–∞—Å–Ω—ã–π —á–∞–π –∏–∑ –Æ–Ω—å–Ω–∞–Ω–∏\n"
            "- –õ–µ–≥–∫–∏–π –∑–µ–ª–µ–Ω—ã–π —á–∞–π —Å —Ü–≤–µ—Ç–æ—á–Ω—ã–º–∏ –Ω–æ—Ç–∞–º–∏\n"
            "- –í—ã–¥–µ—Ä–∂–∞–Ω–Ω—ã–π –ø—É—ç—Ä —Å –∑–µ–º–ª–∏—Å—Ç—ã–º–∏ –Ω–æ—Ç–∞–º–∏\n\n"
            "–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã "
            "–∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.\n\n"
            "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å:\n"
            "- –¢–∏–ø —á–∞—è (–∑–µ–ª–µ–Ω—ã–π, —É–ª—É–Ω, –ø—É—ç—Ä –∏ —Ç.–¥.)\n"
            "- –í–∫—É—Å–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (—Ü–≤–µ—Ç–æ—á–Ω—ã–π, —Ñ—Ä—É–∫—Ç–æ–≤—ã–π, –¥—ã–º–Ω—ã–π –∏ –¥—Ä.)\n"
            "- –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (–æ—Ç/–¥–æ)\n"
            "- –†–µ–≥–∏–æ–Ω –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è (–µ—Å–ª–∏ –≤–∞–∂–Ω–æ)\n"
            "- –ù–∞–ª–∏—á–∏–µ (—Ç–æ–ª—å–∫–æ —á–∞–∏ –≤ –Ω–∞–ª–∏—á–∏–∏)"
        )
        await update.message.reply_text(help_text, parse_mode='HTML')

    async def handle_message(self, update: Update, context: CallbackContext, text: str = None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if text is None:
            if not hasattr(update, 'message') or not update.message:
                logger.error("Update doesn't contain message")
                return
            text = update.message.text

        chat_id = update.effective_chat.id

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç –¥—É–º–∞–µ—Ç
            if hasattr(update, 'message') and update.message:
                message = await update.message.reply_text("üîç –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —á–∞–∏...")
            else:
                message = await context.bot.send_message(chat_id, "üîç –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —á–∞–∏...")

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            result = self.tea_bot.recommend_tea(text)

            if not result['recommendations']:
                await context.bot.send_message(chat_id,
                                               "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞—à–ª–æ—Å—å –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —á–∞–µ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.", parse_mode='Markdown')
                return

            recommendation_text = self.__replace_markdown_with_emojis(result['recommendation_text'])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
            await self.send_long_message(
                context,
                chat_id,
                recommendation_text,
                disable_web_page_preview=True,
                parse_mode='HTML'  # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —á–∞–µ
            for i, rec in enumerate(result['recommendations'], 1):
                tea_text = (
                    f"<b>–ß–∞–π #{i}: {rec['title']}</b>\n"
                    f"üíµ –¶–µ–Ω–∞: {rec['price']} —Ä—É–±.\n"
                    f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {', '.join(rec['tea_category'])}\n"
                    f"üõí {'‚úÖ –ï—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏' if rec.get('available_tea', False) else '‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}\n"
                    f"üîó –°—Å—ã–ª–∫–∞: {rec.get('url', '–Ω–µ—Ç —Å—Å—ã–ª–∫–∏')}\n"
                )

                await self.send_long_message(
                    context,
                    chat_id,
                    tea_text,
                    disable_web_page_preview=True,
                    parse_mode='HTML'  # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            await context.bot.send_message(
                chat_id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application.run_polling()

    @staticmethod
    def __replace_markdown_with_emojis(text: str) -> str:
        replacements = {
            "**": "üçµ",  # –∂–∏—Ä–Ω—ã–π
            "__": "‚ú®",  # –ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π
            "*": "üî∏",  # –∫—É—Ä—Å–∏–≤
            "# ": "üî∑ ",  # –∑–∞–≥–æ–ª–æ–≤–æ–∫
            "## ": "üîπ ",  # –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
            "### ": "‚ñ™Ô∏è ",  # –ø–æ–¥-–ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
            "- ": "‚Ä¢ ",  # —Å–ø–∏—Å–æ–∫
            "> ": "üí¨ ",  # —Ü–∏—Ç–∞—Ç–∞
            "`": "üß†",  # –∫–æ–¥
        }

        for key, emoji in replacements.items():
            text = text.replace(key, emoji)
        return text
